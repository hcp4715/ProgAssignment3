}
#	This next part finds the upper limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,uc[2])<llim)
uc <- c(uc[1],(uc[1]+uc[2])/2,uc[2])
else uc <- c(uc[2],(uc[2]+uc[3])/2,uc[3])
diff <- abs(pf(fval,df1,df2,uc[2]) - llim)
lcdf <- pf(fval,df1,df2,uc[2])
}
c(uc[2],lcdf)
## this part to estimate the upper limits of r2
ur2 <- uc[2]/( uc[2] + dfw + df1 + 1)
ur[2] <- uc[2]/(uc[2] +df2 +df1 +1 )
while (abs(uc2 - ur[2]) >= 0.01 | ur2 <= r2)
{
uc2 = uc[2]
lcdf = lcdf
ur2 = ur[2]
}
}
#
#
#
# powf <-function(df1,df2,alpha,power)
#        {
#                hif(qf(1-alpha,df1,df2),df1,df2,1-(1-power)*2)
#        }
# added based on the script from SPSS, by hcp4715
# This is an code for computing CIs for the noncentral F test
#CIs and power for the noncentral F noncentrality parameter (ncp):
#The function lof computes the lower CI limit and hif computes the upper limit.
#Both functions take 4 arguments: observed f-value, df1, d2, and confidence level.
#The function powf uses hif to find the ncp, given df1, df2, alpha, and power level.
ncfCI <-
function(fval,df1,df2,conf)
{
ulim <- 1 - (1-conf)/2
#	This first part finds a lower and upper value from which to start.
lc <- c(.001,fval/2,fval)
while(pf(fval,df1,df2,lc[1])<ulim) {
if(pf(fval,df1,df2)<ulim)
return(c(0,pf(fval,df1,df2)))
lc <- c(lc[1]/4,lc[1],lc[3])
}
while(pf(fval,df1,df2,lc[3])>ulim) {
lc <- c(lc[1],lc[3],lc[3]+fval)
}
#	This next part finds the lower limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,lc[2])<ulim)
lc <- c(lc[1],(lc[1]+lc[2])/2,lc[2])
else lc <- c(lc[2],(lc[2]+lc[3])/2,lc[3])
diff <- abs(pf(fval,df1,df2,lc[2]) - ulim)
ucdf <- pf(fval,df1,df2,lc[2])
}
c(lc[2],ucdf)
#     This part chose the method to use for the final lower limit of r2
r2 <- fval*df1/(fval*df1+df2)
lr2 <- lc[2]/(lc[2] +df2 + df1 +1)
lr[2] <- lc[2]/(lc[2] + df2 +df1 + 1)
if (abs(lr2 - lr[2]) >= 0.1 | lr2 > r2)
{
lc[2] <- lc[2]
ucdf <- ucdf
lr2 <- lr[2]
}
###
llim <- (1-conf)/2
#        This first part finds a lower and upper value from which to start.
uc <- c(fval,2*fval,3*fval)
while(pf(fval,df1,df2,uc[1])<llim) {
uc <- c(uc[1]/4,uc[1],uc[3])
}
while(pf(fval,df1,df2,uc[3])>llim) {
uc <- c(uc[1],uc[3],uc[3]+fval)
}
#	This next part finds the upper limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,uc[2])<llim)
uc <- c(uc[1],(uc[1]+uc[2])/2,uc[2])
else uc <- c(uc[2],(uc[2]+uc[3])/2,uc[3])
diff <- abs(pf(fval,df1,df2,uc[2]) - llim)
lcdf <- pf(fval,df1,df2,uc[2])
}
c(uc[2],lcdf)
## this part to estimate the upper limits of r2
ur2 <- uc[2]/( uc[2] + dfw + df1 + 1)
ur[2] <- uc[2]/(uc[2] +df2 +df1 +1 )
while (abs(uc2 - ur[2]) >= 0.01 | ur2 <= r2)
{
uc2 = uc[2]
lcdf = lcdf
ur2 = ur[2]
}
c(lc[2],ucdf,uc[2],lcdf,r2,lr2,ur2)
}
#
#
#
# powf <-function(df1,df2,alpha,power)
#        {
#                hif(qf(1-alpha,df1,df2),df1,df2,1-(1-power)*2)
#        }
# added based on the script from SPSS, by hcp4715
ncfCI(9.45,2,116,0.95)
# This is an code for computing CIs for the noncentral F test
#CIs and power for the noncentral F noncentrality parameter (ncp):
#The function lof computes the lower CI limit and hif computes the upper limit.
#Both functions take 4 arguments: observed f-value, df1, d2, and confidence level.
#The function powf uses hif to find the ncp, given df1, df2, alpha, and power level.
ncfCI <-
function(fval,df1,df2,conf)
{
ulim <- 1 - (1-conf)/2
#	This first part finds a lower and upper value from which to start.
lc <- c(.001,fval/2,fval)
while(pf(fval,df1,df2,lc[1])<ulim) {
if(pf(fval,df1,df2)<ulim)
return(c(0,pf(fval,df1,df2)))
lc <- c(lc[1]/4,lc[1],lc[3])
}
while(pf(fval,df1,df2,lc[3])>ulim) {
lc <- c(lc[1],lc[3],lc[3]+fval)
}
#	This next part finds the lower limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,lc[2])<ulim)
lc <- c(lc[1],(lc[1]+lc[2])/2,lc[2])
else lc <- c(lc[2],(lc[2]+lc[3])/2,lc[3])
diff <- abs(pf(fval,df1,df2,lc[2]) - ulim)
ucdf <- pf(fval,df1,df2,lc[2])
}
c(lc[2],ucdf)
#     This part chose the method to use for the final lower limit of r2
r2 <- fval*df1/(fval*df1+df2)
lr2 <- lc[2]/(lc[2] +df2 + df1 +1)
llr <- lc[2]/(lc[2] + df2 +df1 + 1)
if (abs(lr2 - llr) >= 0.1 | lr2 > r2)
{
lc[2] <- lc[2]
ucdf <- ucdf
lr2 <- llr
}
###
llim <- (1-conf)/2
#        This first part finds a lower and upper value from which to start.
uc <- c(fval,2*fval,3*fval)
while(pf(fval,df1,df2,uc[1])<llim) {
uc <- c(uc[1]/4,uc[1],uc[3])
}
while(pf(fval,df1,df2,uc[3])>llim) {
uc <- c(uc[1],uc[3],uc[3]+fval)
}
#	This next part finds the upper limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,uc[2])<llim)
uc <- c(uc[1],(uc[1]+uc[2])/2,uc[2])
else uc <- c(uc[2],(uc[2]+uc[3])/2,uc[3])
diff <- abs(pf(fval,df1,df2,uc[2]) - llim)
lcdf <- pf(fval,df1,df2,uc[2])
}
c(uc[2],lcdf)
## this part to estimate the upper limits of r2
ur2 <- uc[2]/( uc[2] + dfw + df1 + 1)
uur <- uc[2]/(uc[2] +df2 +df1 +1 )
while (abs(uc2 - uur) >= 0.01 | ur2 <= r2)
{
uc2 = uc[2]
lcdf = lcdf
ur2 = uur
}
c(lc[2],ucdf,uc[2],lcdf,r2,lr2,ur2)
}
#
#
#
# powf <-function(df1,df2,alpha,power)
#        {
#                hif(qf(1-alpha,df1,df2),df1,df2,1-(1-power)*2)
#        }
# added based on the script from SPSS, by hcp4715
ncfCI(9.45,2,116,0.95)
# This is an code for computing CIs for the noncentral F test
#CIs and power for the noncentral F noncentrality parameter (ncp):
#The function lof computes the lower CI limit and hif computes the upper limit.
#Both functions take 4 arguments: observed f-value, df1, d2, and confidence level.
#The function powf uses hif to find the ncp, given df1, df2, alpha, and power level.
ncfCI <-
function(fval,df1,df2,conf)
{
ulim <- 1 - (1-conf)/2
#	This first part finds a lower and upper value from which to start.
lc <- c(.001,fval/2,fval)
while(pf(fval,df1,df2,lc[1])<ulim) {
if(pf(fval,df1,df2)<ulim)
return(c(0,pf(fval,df1,df2)))
lc <- c(lc[1]/4,lc[1],lc[3])
}
while(pf(fval,df1,df2,lc[3])>ulim) {
lc <- c(lc[1],lc[3],lc[3]+fval)
}
#	This next part finds the lower limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,lc[2])<ulim)
lc <- c(lc[1],(lc[1]+lc[2])/2,lc[2])
else lc <- c(lc[2],(lc[2]+lc[3])/2,lc[3])
diff <- abs(pf(fval,df1,df2,lc[2]) - ulim)
ucdf <- pf(fval,df1,df2,lc[2])
}
c(lc[2],ucdf)
#     This part chose the method to use for the final lower limit of r2
r2 <- fval*df1/(fval*df1+df2)
lr2 <- lc[2]/(lc[2] +df2 + df1 +1)
llr <- lc[2]/(lc[2] + df2 +df1 + 1)
if (abs(lr2 - llr) >= 0.1 | lr2 > r2)
{
lc[2] <- lc[2]
ucdf <- ucdf
lr2 <- llr
}
###
llim <- (1-conf)/2
#        This first part finds a lower and upper value from which to start.
uc <- c(fval,2*fval,3*fval)
while(pf(fval,df1,df2,uc[1])<llim) {
uc <- c(uc[1]/4,uc[1],uc[3])
}
while(pf(fval,df1,df2,uc[3])>llim) {
uc <- c(uc[1],uc[3],uc[3]+fval)
}
#	This next part finds the upper limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,uc[2])<llim)
uc <- c(uc[1],(uc[1]+uc[2])/2,uc[2])
else uc <- c(uc[2],(uc[2]+uc[3])/2,uc[3])
diff <- abs(pf(fval,df1,df2,uc[2]) - llim)
lcdf <- pf(fval,df1,df2,uc[2])
}
c(uc[2],lcdf)
## this part to estimate the upper limits of r2
ur2 <- uc[2]/( uc[2] + df2 + df1 + 1)
uur <- uc[2]/(uc[2] +df2 +df1 +1 )
while (abs(uc2 - uur) >= 0.01 | ur2 <= r2)
{
uc2 = uc[2]
lcdf = lcdf
ur2 = uur
}
c(lc[2],ucdf,uc[2],lcdf,r2,lr2,ur2)
}
#
#
#
# powf <-function(df1,df2,alpha,power)
#        {
#                hif(qf(1-alpha,df1,df2),df1,df2,1-(1-power)*2)
#        }
# added based on the script from SPSS, by hcp4715
ncfCI(9.45,2,116,0.95)
# This is an code for computing CIs for the noncentral F test
#CIs and power for the noncentral F noncentrality parameter (ncp):
#The function lof computes the lower CI limit and hif computes the upper limit.
#Both functions take 4 arguments: observed f-value, df1, d2, and confidence level.
#The function powf uses hif to find the ncp, given df1, df2, alpha, and power level.
ncfCI <-
function(fval,df1,df2,conf)
{
ulim <- 1 - (1-conf)/2
#	This first part finds a lower and upper value from which to start.
lc <- c(.001,fval/2,fval)
while(pf(fval,df1,df2,lc[1])<ulim) {
if(pf(fval,df1,df2)<ulim)
return(c(0,pf(fval,df1,df2)))
lc <- c(lc[1]/4,lc[1],lc[3])
}
while(pf(fval,df1,df2,lc[3])>ulim) {
lc <- c(lc[1],lc[3],lc[3]+fval)
}
#	This next part finds the lower limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,lc[2])<ulim)
lc <- c(lc[1],(lc[1]+lc[2])/2,lc[2])
else lc <- c(lc[2],(lc[2]+lc[3])/2,lc[3])
diff <- abs(pf(fval,df1,df2,lc[2]) - ulim)
ucdf <- pf(fval,df1,df2,lc[2])
}
c(lc[2],ucdf)
#     This part chose the method to use for the final lower limit of r2
r2 <- fval*df1/(fval*df1+df2)
lr2 <- lc[2]/(lc[2] +df2 + df1 +1)
llr <- lc[2]/(lc[2] + df2 +df1 + 1)
if (abs(lr2 - llr) >= 0.1 | lr2 > r2)
{
lc[2] <- lc[2]
ucdf <- ucdf
lr2 <- llr
}
###
llim <- (1-conf)/2
#        This first part finds a lower and upper value from which to start.
uc <- c(fval,2*fval,3*fval)
while(pf(fval,df1,df2,uc[1])<llim) {
uc <- c(uc[1]/4,uc[1],uc[3])
}
while(pf(fval,df1,df2,uc[3])>llim) {
uc <- c(uc[1],uc[3],uc[3]+fval)
}
#	This next part finds the upper limit for the ncp.
diff <- 1
while(diff > .00001) {
if(pf(fval,df1,df2,uc[2])<llim)
uc <- c(uc[1],(uc[1]+uc[2])/2,uc[2])
else uc <- c(uc[2],(uc[2]+uc[3])/2,uc[3])
diff <- abs(pf(fval,df1,df2,uc[2]) - llim)
lcdf <- pf(fval,df1,df2,uc[2])
}
c(uc[2],lcdf)
## this part to estimate the upper limits of r2
ur2 <- uc[2]/( uc[2] + df2 + df1 + 1)
uur <- uc[2]/(uc[2] +df2 +df1 +1 )
while (abs(ur2 - uur) >= 0.01 | ur2 <= r2)
{
uc2 = uc[2]
lcdf = lcdf
ur2 = uur
}
c(lc[2],ucdf,uc[2],lcdf,r2,lr2,ur2)
}
#
#
#
# powf <-function(df1,df2,alpha,power)
#        {
#                hif(qf(1-alpha,df1,df2),df1,df2,1-(1-power)*2)
#        }
# added based on the script from SPSS, by hcp4715
ncfCI(9.45,2,116,0.95)
ncfCI(5,2,116,0.95)
library(statcheck)
install.packages("statcheck")
library(statcheck)
checkPDF("D:/My Document/R/statcheck/Fernandez-Duque-2014-Superfluous Neuroscience.pdf")
checkPDF("D:/My Documents/R/statcheck/Fernandez-Duque-2014-Superfluous Neuroscience.pdf")
checkPDF("D:/My Documents/R/statcheck/Fernandez-Duque-2014-Superfluous Neuroscience .pdf")
checkPDF("D:/My Documents/R/statcheck/Fernandez-Duque-2014.pdf")
checkPDF("D:/My Documents/R/statcheck/Fernandez-Duque-2014.pdf")
checkPDF("D:/My Documents/R/statcheck/Fernandez-Duque-2014.pdf")
checkPDF("D:/My Documents/R/statcheck/Fernandez_2014.pdf")
checkPDF("D:/Fernandez_2014.pdf")
help(checkPDF)
checkPDF("D:/Fernandez_2014.pdf")
library(statcheck)
checkPDF("D:/Fernandez_2014.pdf")
report <- checkPDF("D:/Fernandez_2014.pdf")
report
write(level(report$Raw),file = "report.txt")
write(levels(report$Raw),file = "report.txt")
library("statcheck")
PDFcheck("D:/Fernandez2014.pdf")
checkPDF("D:/Fernandez2014.pdf")
df <- read.csv("E:/kuaipan/Exp.s/Project1_Moral_reputation_learning/Exp_Behav_Moral_Asso/Exp_Behav_Moral_Asso_4.2_self_as_distractor/Results/R_analysis/exp4.2_d_long.csv", header = TRUE, sep = ",")
View(df)
library("ez")
ezPrecis(df)
dprime_anova <- ezANOVA(df, dv = Dprime, wid = Subject, within=.(morality,Identity),type=3)
printe(dprime_anova)
print(dprime_anova)
dprime_anova <- ezANOVA(df, dv = Dprime, wid = Subject, within=.(morality,Identity),type=2)
print(dprime_anova)
add2 <- function(x,y){
x + y
}
add2(2,3)
above <- funciton(x,n){
use <- x >n
x[use]
}
above <- function(x,n){
use <- x > n
x[use]
}
a <- c(1,2,3,5,5,10,6)
above(a,5)
above <- function(x,n = 10){
use <- x > n
x[use]
}
a <- c(1,2,3,5,5,11,,12,6)
a <- c(1,2,3,5,5,11,11,12,6)
above(a)
above(a,5)
above(a,4)
search[]
search()
x <- Sys.times()
x <- Sys.t()
x <- Sys.time()
x
P <- as.POSIXct(x)
p
P
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if ( x> 5) {x <- 0}
f <- function(x){
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if (x < 3){NA} else {10}
y
h <- function(x,y = NULL, d = 3L) {
z <- cbind(x,d)
if(!is.null(x))
z <- z + y
else
z <- z + f
g <- x + y/z
if(d==3L)
return(g)
g <- g + 10
g
}
h(10)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
rm(list=ls(all=TRUE))
data()
str(str)
str(lm)
x <- rnorm(100,2,4)
summary(x)
str(x)
f <- gl(40,10)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- (matrix(rnorm(100),10,10))
str(m)
s <- split(airquality, month)
s <- split(airquality, airquality$month)
s <- split(airquality, airquality$Month)
str(s)
x <- rnorm(10)
x
x <- rnorm(10,20,2)
x
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10,1)
set.seed(5)
rpois(5)
rpois(10,1)
rpois(10,1)
set.seed(5)
rpois(10,1)
set.seed(20)
x <-rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y)
setwd(dir = "D:/My Documents/GitHub/ProgAssignment3")
outcome <- read.csv("outcome-of-care-measure.csv",colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
head(outcome)
ncol(outcome)
nrow(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hit(outcome[,11])
hist(outcome[,11])
str(outcome)
